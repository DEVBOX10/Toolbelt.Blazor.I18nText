<Project>

  <!--
  This targets file will be bundled with a NuGet package of this library in 'build' package path,
  and will be imported the project file that references this package.
  -->

  <!-- FOR COMPILING -->
  <UsingTask TaskName="Toolbelt.Blazor.I18nText.CompileI18nText"  AssemblyFile="$(MSBuildThisFileDirectory)..\tools\Toolbelt.Blazor.I18nText.CompileTask.dll" />

  <PropertyGroup>
    <I18nTextSourceDirectory Condition=" '$(I18nTextSourceDirectory)' == '' ">i18ntext</I18nTextSourceDirectory>
    <I18nTextFilePattern Condition=" '$(I18nTextFilePattern)' == '' ">$(I18nTextSourceDirectory)\**\*.json;$(I18nTextSourceDirectory)\**\*.csv</I18nTextFilePattern>
    <I18nTextNamespace Condition=" '$(I18nTextNamespace)' == '' ">$(RootNamespace).I18nText</I18nTextNamespace>
    <I18nTextFallBackLanguage Condition=" '$(I18nTextFallBackLanguage)' == '' ">en</I18nTextFallBackLanguage>
    <I18nTextDisableSubNameSpace Condition=" '$(I18nTextDisableSubNameSpace)' == '' ">false</I18nTextDisableSubNameSpace>
    <I18nTextIntermediateDir>$(ProjectDir)$(IntermediateOutputPath)dist\_content\i18ntext\</I18nTextIntermediateDir>
    <I18nTextUpToDateMarker>$(I18nTextIntermediateDir).UpToDateMarker</I18nTextUpToDateMarker>
  </PropertyGroup>

  <ItemGroup>
    <Content Remove="$(I18nTextFilePattern)" />
    <None Remove="$(I18nTextFilePattern)" />
    <None Include="$(I18nTextFilePattern)" />
  </ItemGroup>

  <!-- FOR FAST UP-TO-DATE CHECK -->
  <Target Name="CollectUpToDateCheckI18nText" BeforeTargets="CollectUpToDateCheckInputDesignTime;CollectUpToDateCheckBuiltDesignTime">
    <ItemGroup>
      <UpToDateCheckInput Include="$(I18nTextFilePattern)" Set="I18nTextUpToDateCheck" />
      <UpToDateCheckBuilt Include="$(I18nTextUpToDateMarker)" Set="I18nTextUpToDateCheck" />
    </ItemGroup>
  </Target>

  <!-- FOR DOTNET WATCH -->
  <ItemGroup Condition=" '$(DotNetWatchBuild)' == 'true' ">
    <Watch Remove="$(I18nTextFilePattern)" />
    <Watch Include="$(I18nTextFilePattern)" />
  </ItemGroup>

  <!-- Watch command: "dotnet watch msbuild -nologo -t:CompileI18nText -v:n" -->
  <Target Name="CompileI18nText" DependsOnTargets="_CompileI18nText">
    <MakeDir Directories="$(TargetDir)wwwroot\_content\i18ntext" />
    <Copy SourceFiles="@(_IntermediateBlazorI18nTextResourceJsons)" DestinationFolder="$(TargetDir)wwwroot\_content\i18ntext" SkipUnchangedFiles="true"/>
  </Target>

  <Target Name="_CompileI18nText" BeforeTargets="PreBuildEvent">

    <ItemGroup>
      <I18nText Include="$(I18nTextFilePattern)" />
    </ItemGroup>

    <MakeDir Directories="$(I18nTextIntermediateDir)" />

    <CompileI18nText Include="@(I18nText)"
                     I18nTextSourceDirectory="$(I18nTextSourceDirectory)"
                     OutDirectory="$(IntermediateOutputPath)dist\_content\i18ntext"
                     BaseDir="$(ProjectDir)"
                     Namespace="$(I18nTextNamespace)"
                     DisableSubNameSpace="$(I18nTextDisableSubNameSpace)"
                     FallBackLanguage="$(I18nTextFallBackLanguage)"/>

    <ItemGroup>
      <_IntermediateBlazorI18nTextResourceJsons Remove="$(I18nTextIntermediateDir)*.json" />
      <_IntermediateBlazorI18nTextResourceJsons Include="$(I18nTextIntermediateDir)*.json" />

      <ContentWithTargetPath Remove="@(_IntermediateBlazorI18nTextResourceJsons)" />
      <ContentWithTargetPath Include="@(_IntermediateBlazorI18nTextResourceJsons)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <TargetPath>wwwroot\_content\i18ntext\%(Filename)%(Extension)</TargetPath>
        <Visible>false</Visible>
        <Pack>false</Pack>
      </ContentWithTargetPath>
    </ItemGroup>

    <Touch Files="$(I18nTextUpToDateMarker)" AlwaysCreate="true" />

  </Target>

  <!-- FOR PROJECT-REFERENCED LIBRARIES -->
  <ItemGroup>
    <_IntermediateBlazorI18nTextResourceJsons Remove="$(I18nTextIntermediateDir)*.json">
    </_IntermediateBlazorI18nTextResourceJsons>
    <_IntermediateBlazorI18nTextResourceJsons Include="$(I18nTextIntermediateDir)*.json">
    </_IntermediateBlazorI18nTextResourceJsons>

    <ContentWithTargetPath Remove="@(_IntermediateBlazorI18nTextResourceJsons)">
    </ContentWithTargetPath>
    <ContentWithTargetPath Include="@(_IntermediateBlazorI18nTextResourceJsons)">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      <TargetPath>wwwroot\_content\i18ntext\%(Filename)%(Extension)</TargetPath>
      <Visible>false</Visible>
      <Pack>false</Pack>
    </ContentWithTargetPath>
  </ItemGroup>


  <!-- FOR CREATE PACKAGE -->
  <PropertyGroup>
    <BeforePack>_IncludeBlazorI18nTextResourceJsonsForPack; $(BeforePack)</BeforePack>
  </PropertyGroup>
  <Target Name="_IncludeBlazorI18nTextResourceJsonsForPack" DependsOnTargets="CompileI18nText" >
    <ItemGroup>

      <None Include="@(_IntermediateBlazorI18nTextResourceJsons)">
        <PackagePath>i18ntext\%(filename)%(extension)</PackagePath>
        <Pack>true</Pack>
        <Visible>false</Visible>
      </None>

      <None Include="$(MSBuildThisFileDirectory)..\targets\I18nTextPackageBuild.targets">
        <PackagePath>build\$(PackageId).targets</PackagePath>
        <Pack>true</Pack>
        <Visible>false</Visible>
      </None>

    </ItemGroup>
  </Target>


  <!-- FOR SUPPORT TO .NET 6 Razor SDK - NEW STATIC WEB ASSETS ARCHITECTURE -->
  <PropertyGroup Condition=" $(TargetFramework.StartsWith('net6')) ">
    <ResolveStaticWebAssetsInputsDependsOn>_ResolveStaticWebAssetsOfBlazorI18nTextResourceJsons;$(ResolveStaticWebAssetsInputsDependsOn)</ResolveStaticWebAssetsInputsDependsOn>
  </PropertyGroup>
  <Target Name="_ResolveStaticWebAssetsOfBlazorI18nTextResourceJsons" Condition=" $(TargetFramework.StartsWith('net6')) ">
    <CallTarget Targets="_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences">
      <Output TaskParameter="TargetOutputs" ItemName="_BlazorI18nTextResourceJsonsCandidates" />
    </CallTarget>
    <!--<CallTarget Targets="_GetCopyToOutputDirectoryItemsFromThisProject">
      <Output TaskParameter="TargetOutputs" ItemName="_BlazorI18nTextResourceJsonsCandidates" />
    </CallTarget>-->
    <ItemGroup>
      <_BlazorI18nTextResourceJsons Include="@(ContentWithTargetPath)" Condition="$([System.String]::Copy('%(TargetPath)').StartsWith('wwwroot\_content\i18ntext\'))" />
      <_BlazorI18nTextResourceJsons Include="@(_BlazorI18nTextResourceJsonsCandidates)" Condition="$([System.String]::Copy('%(TargetPath)').StartsWith('wwwroot\_content\i18ntext\'))" />

      <StaticWebAsset Remove="@(StaticWebAsset)" Condition=" '%(SourceId)' == 'BlazorI18nTextResourceJsons' " />
      
      <StaticWebAsset Include="@(_BlazorI18nTextResourceJsons)">

        <!-- From the semantics, the source type should be "Computed".
             However, it has a case that causes the following error at publishing time, especially in projects that reference other projects.
             So we will work around it by specifying "Project".
             "error : Found conflicting definitions for the same asset ... and ..." -->
        <!--<SourceType>Computed</SourceType>-->
        <SourceType>Project</SourceType>

        <!-- Throughout all the projects in the solution, the i18n localized json files should have the same "SourceId" value, 
             not the "SourceId" by each project's package id.
             Otherwise, you may get the following error at build time, especially in projects that reference other projects. 
             "error : Found conflicting definitions for the same asset ... and ..." -->
        <!--<SourceId>$(PackageId)</SourceId>-->
        <SourceId>BlazorI18nTextResourceJsons</SourceId>

        <ContentRoot>%(RelativeDir)</ContentRoot>
        <BasePath>/</BasePath>
        <RelativePath>_content/i18ntext/%(FileName)%(Extension)</RelativePath>
        <OriginalItemSpec>%(FullPath)</OriginalItemSpec>
        <AssetKind>All</AssetKind>
        <AssetMode>All</AssetMode>
        <AssetRole>Primary</AssetRole>

        <!-- If the "CopyToPublishDirectory" is omitted, it has a case that causes the following error at publishing time, 
             especially in projects that reference other projects.
             "error : Found conflicting definitions for the same asset ... and ..." -->
        <CopyToPublishDirectory>Never</CopyToPublishDirectory>
      </StaticWebAsset>
    </ItemGroup>

  </Target>

</Project>