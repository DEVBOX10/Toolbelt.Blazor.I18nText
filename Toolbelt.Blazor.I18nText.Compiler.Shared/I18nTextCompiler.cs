using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Security;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Newtonsoft.Json;
using TinyCsvParser;
using TinyCsvParser.Mapping;
using Toolbelt.Blazor.I18nText.Internals;

namespace Toolbelt.Blazor.I18nText
{
    public class I18nTextCompiler
    {
        private const string GeneratedMarker = "// <auto-generated by=\"the Blazor I18n Text compiler\" />";

        public bool Compile(IEnumerable<I18nTextSourceFile> srcFiles, I18nTextCompilerOptions options)
        {
            return Compile(srcFiles, options, beforeCompile: SweepTypeFilesShouldBePurged, saveCode: SaveTypeCodeToTypeFiles);
        }

        public static bool Compile(
            IEnumerable<I18nTextSourceFile> srcFiles,
            I18nTextCompilerOptions options,
            Action<I18nTextCompilerOptions, I18nTextCompileItem, IEnumerable<string>> saveCode)
        {
            return Compile(srcFiles, options, beforeCompile: null, saveCode);
        }

        private static bool Compile(
            IEnumerable<I18nTextSourceFile> srcFiles,
            I18nTextCompilerOptions options,
            Action<I18nTextCompilerOptions, IEnumerable<I18nTextCompileItem>> beforeCompile,
            Action<I18nTextCompilerOptions, I18nTextCompileItem, IEnumerable<string>> saveCode)
        {
            try
            {
                var i18textSrc = ParseSourceFiles(srcFiles, options);
                OutputTypesFiles(options, i18textSrc, beforeCompile, saveCode);
                OutputI18nTextJsonFiles(options, i18textSrc);
                return true;
            }
            catch (AggregateException e) when (e.InnerException is I18nTextCompileException compileException)
            {
                options.LogError(compileException);
                return false;
            }
            catch (I18nTextCompileException compileException)
            {
                options.LogError(compileException);
                return false;
            }
        }

        private delegate string ConvertPath(string srcPath);

        private static I18nTextSource ParseSourceFiles(IEnumerable<I18nTextSourceFile> srcFiles, I18nTextCompilerOptions options)
        {
            var i18textSrc = new I18nTextSource();
            if (!srcFiles.Any()) return i18textSrc;

            var i18nSrcDir = options.I18nTextSourceDirectory;
            if (!i18nSrcDir.EndsWith(Path.DirectorySeparatorChar.ToString())) i18nSrcDir += Path.DirectorySeparatorChar;

            ConvertPath convertPath;
            if (options.DisableSubNameSpace)
            {
                convertPath = delegate (string srcPath) { return Path.GetFileName(srcPath); };
            }
            else
            {
                convertPath = delegate (string srcPath)
                {
                    return srcPath.StartsWith(i18nSrcDir) ? srcPath.Substring(i18nSrcDir.Length) : Path.GetFileName(srcPath);
                };
            }

            Parallel.ForEach(srcFiles, srcFile =>
            {
                var srcName = convertPath(srcFile.Path);
                var fnameParts = srcName.Split('.', Path.DirectorySeparatorChar);
                var typeName = string.Join(".", fnameParts.Take(fnameParts.Length - 2));
                var langCode = fnameParts[fnameParts.Length - 2];
                var srcText = File.ReadAllText(srcFile.Path, srcFile.Encoding);
                var textTable = DeserializeSrcText(srcText, Path.GetExtension(srcFile.Path).ToLower());

                var type = i18textSrc.Types.GetOrAdd(typeName, new I18nTextType());
                type.Langs[langCode] = textTable;
            });

            Parallel.ForEach(i18textSrc.Types.Values, type =>
            {
                type.TextKeys = type.Langs
                    .SelectMany(lang => lang.Value)
                    .Select(tt => tt.Key)
                    .OrderBy(key => key)
                    .Distinct()
                    .ToList();

                Parallel.ForEach(type.Langs, lang =>
                {
                    var textTable = lang.Value;
                    foreach (var textKey in type.TextKeys.Where(k => !textTable.ContainsKey(k)))
                    {
                        var text = type.Langs.Keys
                            .OrderBy(langCode => langCode.StartsWith("en") ? "0" : langCode)
                            .Select(langCode => type.Langs[langCode].TryGetValue(textKey, out var t) ? t : null)
                            .FirstOrDefault(t => t != null);
                        textTable[textKey] = text ?? textKey;
                    }
                });
            });

            return i18textSrc;
        }

        private static I18nTextTable DeserializeSrcText(string srcText, string fileNameExtension)
        {
            switch (fileNameExtension)
            {
                case ".json": return DeserializeSrcTextFromJson(srcText);
                case ".csv": return DeserializeSrcTextFromCsv(srcText);
                default: throw new I18nTextCompileException(code: 2, $"Unknown file type ({fileNameExtension}) as an I18n Text source file.");
            }
        }

        private static I18nTextTable DeserializeSrcTextFromJson(string srcText)
        {
            // NOTE:
            // a JSON.NET old version has problem that it can't deserialize ConcurrentDictionary directly.
            // Therefore, deserialize into normal dictionary at first, and second, re - constrauct as ConcurrentDictionary.
            var tableTextRaw = JsonConvert.DeserializeObject<Dictionary<string, string>>(srcText);
            return new I18nTextTable(tableTextRaw);
        }

        internal class KeyValue
        {
            public string Key { get; set; }

            public string Value { get; set; }
        }

        internal class CsvKeyValueMapping : CsvMapping<KeyValue>
        {
            public CsvKeyValueMapping() : base()
            {
                this.MapProperty(0, x => x.Key);
                this.MapProperty(1, x => x.Value);
            }
        }

        private static I18nTextTable DeserializeSrcTextFromCsv(string srcText)
        {
            var csvParser = new CsvParser<KeyValue>(
                new CsvParserOptions(skipHeader: false, fieldsSeparator: ','),
                new CsvKeyValueMapping());
            var tableTextRaw = csvParser.ReadFromString(new CsvReaderOptions(new[] { "\r\n", "\n" }), srcText)
                .ToDictionary(row => row.Result.Key, row => row.Result.Value);
            return new I18nTextTable(tableTextRaw);
        }

        private static void OutputTypesFiles(
            I18nTextCompilerOptions options,
            I18nTextSource i18textSrc,
            Action<I18nTextCompilerOptions, IEnumerable<I18nTextCompileItem>> beforeCompile,
            Action<I18nTextCompilerOptions, I18nTextCompileItem, IEnumerable<string>> saveCode)
        {
            if (!i18textSrc.Types.Any()) return;

            var i18nTextCompilerItems = i18textSrc.Types.Select(type =>
            {
                var typeFullName = options.NameSpace + "." + type.Key;
                var typeNameParts = typeFullName.Split('.');
                var typeNamespace = string.Join(".", typeNameParts.Take(typeNameParts.Length - 1));
                var typeName = typeNameParts.Last();

                var typeFilePath = Path.Combine(options.TypesDirectory, typeFullName + ".cs");
                return new I18nTextCompileItem(type, typeNamespace, typeName, typeFilePath);
            }).ToArray();

            beforeCompile?.Invoke(options, i18nTextCompilerItems);

            Parallel.ForEach(i18nTextCompilerItems, comilerItem =>
            {
                var langs = comilerItem.Type.Value.Langs;
                var langParts = options.FallBackLanguage.Split('-');
                var fallbackLangs = langParts.Length > 1 ? new[] { options.FallBackLanguage, langParts[0] } : new[] { options.FallBackLanguage };
                var fallbackLang = fallbackLangs.FirstOrDefault(lang => langs.ContainsKey(lang));
                if (fallbackLang == null) throw new I18nTextCompileException(code: 1, $"Could not find an I18n source text file of fallback language '{options.FallBackLanguage}', for '{options.NameSpace}.{comilerItem.Type.Key}'.");
                var textTable = langs[fallbackLang];

                var hash = GenerateHash(comilerItem.Type.Value);

                var typeCode = new List<string>();
                typeCode.Add(GeneratedMarker);
                typeCode.Add($"namespace {comilerItem.TypeNamespace}");
                typeCode.Add("{");
                typeCode.Add($"    public partial class {comilerItem.TypeName} : global::Toolbelt.Blazor.I18nText.Interfaces.I18nTextFallbackLanguage, global::Toolbelt.Blazor.I18nText.Interfaces.I18nTextLateBinding, global::Toolbelt.Blazor.I18nText.Interfaces.I18nTextTableHash");
                typeCode.Add("    {");
                typeCode.Add($"        string global::Toolbelt.Blazor.I18nText.Interfaces.I18nTextTableHash.Hash => \"{hash}\";");
                typeCode.Add("");
                typeCode.Add($"        string global::Toolbelt.Blazor.I18nText.Interfaces.I18nTextFallbackLanguage.FallBackLanguage => \"{options.FallBackLanguage}\";");
                typeCode.Add("");
                typeCode.Add("        public string this[string key] => global::Toolbelt.Blazor.I18nText.I18nTextExtensions.GetFieldValue(this, key);");
                typeCode.Add("");
                var is1stLine = true;
                foreach (var textKey in comilerItem.Type.Value.TextKeys)
                {
                    if (!is1stLine) typeCode.Add("");
                    typeCode.Add($"        /// <summary>\"{EscapeForXMLDocSummary(textTable[textKey])}\"</summary>");
                    typeCode.Add($"        public string {textKey};");
                    is1stLine = false;
                }
                typeCode.Add("    }");
                typeCode.Add("}");

                saveCode?.Invoke(options, comilerItem, typeCode);
            });
        }

        private static void SaveTypeCodeToTypeFiles(I18nTextCompilerOptions options, I18nTextCompileItem compileItem, IEnumerable<string> typeCode)
        {
            var skipOutput = false;
            if (File.Exists(compileItem.TypeFilePath))
            {
                var prevTypeCode = File.ReadAllLines(compileItem.TypeFilePath);
                skipOutput = prevTypeCode.SequenceEqual(typeCode);
            }

            if (!skipOutput)
            {
                if (!Directory.Exists(options.TypesDirectory)) Directory.CreateDirectory(options.TypesDirectory);
                File.WriteAllLines(compileItem.TypeFilePath, typeCode);
            }
        }

        /// <summary>
        /// Sweep old generated/should be purge type files.
        /// </summary>
        private static void SweepTypeFilesShouldBePurged(I18nTextCompilerOptions options, IEnumerable<I18nTextCompileItem> compilerItems)
        {
            if (Directory.Exists(options.TypesDirectory))
            {
                var existsTypeFiles = Directory.GetFiles(options.TypesDirectory, "*.cs");
                var shouldBeSweepedFiles = existsTypeFiles.Except(compilerItems.Select(t => t.TypeFilePath));
                foreach (var shouldBeSweepedFile in shouldBeSweepedFiles)
                {
                    if (File.ReadLines(shouldBeSweepedFile).Any(line => line == GeneratedMarker))
                    {
                        File.Delete(shouldBeSweepedFile);
                    }
                }
            }
        }

        internal static string GenerateHash(I18nTextType i18nText)
        {
            using var hash = SHA256.Create();
            using var stream = new I18nTextTableStream(i18nText);
            var hashBytes = hash.ComputeHash(stream);
            return ToBase36(hashBytes);
        }

        private static string ToBase36(byte[] hash)
        {
            const string chars = "0123456789abcdefghijklmnopqrstuvwxyz";

            var result = new char[10];
            var dividend = BigInteger.Abs(new BigInteger(hash.Take(9).ToArray()));
            for (var i = 0; i < 10; i++)
            {
                dividend = BigInteger.DivRem(dividend, 36, out var remainder);
                result[i] = chars[(int)remainder];
            }

            return new string(result);
        }

        private static string EscapeForXMLDocSummary(string text)
        {
            return SecurityElement.Escape(text).Replace("\r", "").Replace("\n", "<br/>");
        }

        private static void OutputI18nTextJsonFiles(I18nTextCompilerOptions options, I18nTextSource i18textSrc)
        {
            if (!i18textSrc.Types.Any()) return;
            if (!Directory.Exists(options.OutDirectory)) Directory.CreateDirectory(options.OutDirectory);

            var types = i18textSrc.Types
                .SelectMany(type => type.Value.Langs.Select(lang => (lang, jsonPath: Path.Combine(options.OutDirectory, options.NameSpace + "." + type.Key + "." + lang.Key + ".json"))))
                .ToArray();

            // Sweep old generated/should be purge text json files.
            var existsTextJsonFiles = Directory.GetFiles(options.OutDirectory, "*.json");
            var shouldBeSweepedFiles = existsTextJsonFiles.Except(types.Select(t => t.jsonPath));
            foreach (var shouldBeSweepedFile in shouldBeSweepedFiles)
            {
                File.Delete(shouldBeSweepedFile);
            }

            Parallel.ForEach(types, ((KeyValuePair<string, I18nTextTable> lang, string jsonPath) arg) =>
            {
                var textTable = new SortedDictionary<string, string>(arg.lang.Value);
                var jsonText = JsonConvert.SerializeObject(textTable, Formatting.Indented);

                var skipOutput = false;
                if (File.Exists(arg.jsonPath))
                {
                    var prevJsonText = File.ReadAllText(arg.jsonPath);
                    skipOutput = prevJsonText == jsonText;
                }

                if (!skipOutput) File.WriteAllText(arg.jsonPath, jsonText);
            });
        }
    }
}
